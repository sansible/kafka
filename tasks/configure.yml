---

# Needed to ensure some services start properly
- name: Set hostname
  become: yes
  lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 {{ ansible_hostname }}"
  notify:
    - restart kafka

- name: Install AWS packages
  become: yes
  apt:
    name: "{{ item }}"
  with_items:
    - python-pip
    - awscli
  when: kafka.aws_cluster_autodiscover.enabled

- name: Install Python libraries
  become: yes
  pip:
    name: "{{ item }}"
  with_items:
    - boto
  when: kafka.aws_cluster_autodiscover.enabled

- name: Get local instance facts
  become: yes
  ec2_facts:
  when: kafka.aws_cluster_autodiscover.enabled

- name: Get local instance tags
  become: yes
  ec2_tag:
    region: "{{ ansible_ec2_placement_region }}"
    resource: "{{ ansible_ec2_instance_id }}"
    state: list
  register: local_ec2_tags
  when: kafka.aws_cluster_autodiscover.enabled

- name: Get remote zookeeper facts
  become: yes
  ec2_remote_facts:
    filters: "{{ kafka.aws_cluster_autodiscover.zookeeper_lookup_filter }}"
    region: "{{ ansible_ec2_placement_region }}"
  register: remote_zookeeper_instances
  when: kafka.aws_cluster_autodiscover.enabled

- debug: msg="{{remote_zookeeper_instances}}"

- name: Setup environment config
  become: yes
  become_user: "{{ kafka.user }}"
  template:
    dest: "/home/{{ kafka.user }}/etc/environment"
    mode: 0644
    src: environment.j2
  notify:
    - restart kafka

- name: Create log4j.properties
  become: yes
  become_user: "{{ kafka.user }}"
  template:
    dest: "/home/{{ kafka.user }}/etc/log4j.properties"
    mode: 0644
    src: log4j.properties.j2
  notify:
    - restart kafka

- name: Create server.properties
  become: yes
  become_user: "{{ kafka.user }}"
  template:
    dest: "/home/{{ kafka.user }}/etc/server.properties"
    mode: 0640
    src: server.properties.j2
  notify:
    - restart kafka

- name: Ensure Kafka is running
  become: yes
  service:
    name: kafka
    state: started
    
- name: Flush handlers to ensure Kafka is up to date
  meta: flush_handlers

- name: Wait for Kafka port
  wait_for:
    port: "{{ kafka.port }}"
    state: started
    timeout: 120
